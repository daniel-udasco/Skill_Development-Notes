-------------------TensorFlow_2.0_Complete_Course_Python_Neural_Networks_for_Beginners_Tutorial[Finished:??/??/2025]-------------------

TensorFlow timestamp
Timestamp: 01:00:00
-------------------

08/27/2025
*write here



08/26/2025
Module 3: Core Learning Algorithms

"We need to understand learning Algorithm so that you can use that techniques and combine together to solve unique problems and datasets."

Common and Easiest to use algorithms:
Linear Regression, Classification, Clustering, and Hidden Markov Models.

Linear Regression - Most basic form of Machine Learning and is used to predict numeric values.

Concept of Linear Regression:
If data points are related linearly, we can generate a line of best fit for these points and use it.

Line of best fit - a line though scatter plot of data points that best expresses the relationship between those points.

Application of Line of best fit:
To predict a new data point.

y = mx + b uses in Linear Regression:
Using the available given data's (m, b, and x)(input) predict/find the missing data/value (y)(output) and vice versa.

Another Example of Linear Regression:
In different dimension (3d) with (x,y,z) you can predict the missing value of one value for example (x) with the two value (y, z) and vice versa.

www



08/25/2025
Jupyter vs Colab:
Jupyter - Local, Offline, advance
Colab - Cloud-based, Online, with GPU/TPU

Tensor -  generalization of vectors and matrices to potentially higher dimensions. main object passed around through the program.

Tensor Data Types: float32, int32, string, etc.

Creating Tensor Example:
string = tf.Variable("this is string", tf.string)

rank - aka. degree, number of dimensions involved in the tensor.

rank0_tensor - scalar.
string = tf.Variable("this is a string", tf.string)
 
rank1_tensor - vector/array.
rank1_tensor = tf.Variable(["Test", "ok"], tf.string)

rank2_tensor - matrix.
rank2_tensor = tf.Variable([["test", "ok"], ["test", "yes"]], tf.string)

To determine the rank of a tensor:
tf.rank(rank2_tensor)
Output: numpy=(2 | *rank_of_tensor)

Tensor Shapes - amount of elements that exist in each dimension.

To determine the shape of a tensor:
rank2_tensor.shape
Output: TensorShape([2, 2] |*shape_of_tensor)

Creating a shape [1,2,3] tensor full of ones:
tensor1 = tf.ones([1,2,3])
Output:[[[1. 1. 1.] [1. 1. 1.]]]

Reshape existing data to shape [3,2,1]:
tensor2 = tf.reshape(tensor1, [2,3,1])
Output:
[[[1.]
  [1.]
  [1.]]
 [[1.]
  [1.]
  [1.]]]

Reshape tensor to [3,2]:
tensor3 = tf.reshape(tensor2, [3, -1]) # use [*num, -1] to automatically guess the missing value (x).
Output:
[[1. 1.]
 [1. 1.]
 [1. 1.]]
note: the number of elements in reshaped tensor must match the number in the original.

Types of Tensors:
Variable, Constant, Placeholder, and SparseTensor.

==========End_of_Module_2==========



08/24/2025
Module 2: Introduction To TensorFlow

TensorFlow - Open source ML library, used to build ML models and NN without complex math.

Graphs - Defines computation (nodes = ops, edges = data flow).

Executes the graph (runs ops, returns results).

Google Colab - free Jupyter Notebook in the cloud.

Notebook - You can write codes & notes.



08/23/2025
Features - Input information (things we have).

Label - output information (we try to predict).

"Data is so important to build AI models."

3 Different kinds of ML:
Unsupervised Learning - Labeled (output) data. To learn input to output mapping (most common type).
Supervised Learning - Unlabeled (output) data. To find patterns/groups.
Reinforcement Learning - No data, but you have agent, environment, and reward. To learn by trial & error & maximize reward.

==========End_of_Module_1==========



08/18/2025
Module 1: Machine Learning Fundamentals

AI - Effort to automate intellectual tasks performed by humans.

Machine Learning - Rather than giving the program the rules (Traditional Programming), An algorithm find/generate the rules for us.

Traditional vs ML programming:
Traditional - Data/Input + Rules/Steps = Answers/Output
ML programming - Data/Input + Answers/Output = Rules/Steps

Deep Learning (NN) - A form of ML that uses layered representation of data.

Machine Learning vs Deep Learning:
Machine Learning - have 2 layers: Input and Output.
Deep Learning - have multiple layers in between them (transformers).










-------------------Researching-------------------

??/??/2025
*write entries here





----Learning AI Development----
Started on: 08/16/2025